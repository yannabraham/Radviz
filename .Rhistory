library(Radviz)
data()
?cats
?iris3
?MNIST
devtools::install_github("hadley/babynames")
library(babynames)
?babynames
data(babynames)
applicants
devtools::use_vignette("Radviz")
vignette('Radviz')
refPhenoMat <- load('extdata/refPhenoMat.rda')
refPhenoMat <- load('vignette/extdata/refPhenoMat.rda')
getwd()
refPhenoMat <- load('vignettes/extdata/refPhenoMat.rda')
norm <- apply(refPhenoMat,2,do.L)
library(Radviz)
norm <- apply(refPhenoMat,2,do.L)
head(refPhenoMat)
?load
refPhenoMat <- load('vignettes/extdata/refPhenoMat.rda')
dim(refPhenoMat)
?load
refPhenoMat <- local(load('vignettes/extdata/refPhenoMat.rda'))
?load
dim(refPhenoMat)
refPhenoMat
load("C:/Projects/Radviz package/Radviz/vignettes/extdata/refPhenoMat.rda")
dim(refPhenoMat)
refPhenoMat <- load('vignettes/extdata/refPhenoMat.rda')
refPhenoMat
refPhenoMat <- load('vignettes/extdata/refPhenoMat.rda')
refPhenoMat
library(bodenmiller)
head(refPhenoMat)
head(bodenmiller::refPhenoMat)
?load
refPhenoMat <- load('vignettes/extdata/refPhenoMat.rda',verbose=T)
load('vignettes/extdata/refPhenoMat.rda',verbose=T)
load('extdata/refPhenoMat.rda')
head(refPhenoData)
head(refPhenoMat)
norm <- apply(refPhenoMat,2,do.L)
# perform radviz on phenotypic markers
ct.S <- make.S(dimnames(refPhenoMat)[[2]])
ct.sim <- cosine(norm)
# optimize the dimensional anchors
optim.ct <- do.optim(ct.S,ct.sim,iter=100,n=1000)
ct.S
?do.hex
?hexplot
ct.rv <- do.hex(ct.rv,n=60,
colramp=function(x) diverge_hcl(x),
channels=c('c.kit','CD150.Slam','Sca.1'),
ncols=7,
use.quantile=T
)
norm <- apply(refPhenoMat,2,do.L)
# perform radviz on phenotypic markers
ct.S <- make.S(dimnames(refPhenoMat)[[2]])
ct.sim <- cosine(norm)
# optimize the dimensional anchors
optim.ct <- do.optim(ct.S,ct.sim,iter=100,n=1000)
ct.S <- make.S(tail(optim.ct$best,1)[[1]])
ct.rv <- do.radviz(norm,ct.S)
load('vignettes/extdata/refPhenoMat.rda')
norm <- apply(refPhenoMat,2,do.L)
# perform radviz on phenotypic markers
ct.S <- make.S(dimnames(refPhenoMat)[[2]])
ct.sim <- cosine(norm)
# optimize the dimensional anchors
optim.ct <- do.optim(ct.S,ct.sim,iter=100,n=1000)
ct.S <- make.S(tail(optim.ct$best,1)[[1]])
ct.rv <- do.radviz(norm,ct.S)
ct.rv <- do.hex(ct.rv,n=60,
colramp=function(x) diverge_hcl(x),
channels=c('c.kit','CD150.Slam','Sca.1'),
ncols=7,
use.quantile=T
)
hexplot(ct.rv,mincnt=100)
ct.rv <- do.hex(ct.rv,n=60,
colramp=function(x) diverge_hcl(x),
channels=dimnames(refFuncMat)[[2]],
ncols=7,
use.quantile=T
)
plot(ct.rv)
ct.rv$missing
head(ct.rv$data)
load('vignettes/extdata/refMat.rda')
load('vignettes/extdata/refPhenoMat.rda')
load('vignettes/extdata/refFuncMat.rda')
norm <- apply(refMat,2,do.L)
# perform radviz on phenotypic markers
ct.S <- make.S(dimnames(refPhenoMat)[[2]])
ct.sim <- cosine(norm)
# optimize the dimensional anchors
optim.ct <- do.optim(ct.S,ct.sim,iter=100,n=1000)
ct.S <- make.S(tail(optim.ct$best,1)[[1]])
ct.rv <- do.radviz(norm,ct.S)
head(ct.rv$data)
smoothRadviz(ct.rv)
ct.rv <- do.density(ct.rv,n=100)
contour(ct.rv)
ct.rv <- do.hex(ct.rv,n=60,
colramp=function(x) diverge_hcl(x),
channels=dimnames(refFuncMat)[[2]],
ncols=7,
use.quantile=T
)
hexplot(ct.rv,mincnt=100)
hexplot(ct.rv,mincnt=10,color='c.kit')
hexplot(ct.rv,mincnt=2,color='c.kit')
hexplot(ct.rv,mincnt=5)
hexplot(ct.rv,mincnt=2,color='pS6')
boxplot(refFuncMat)
boxplot(refFuncMat)
boxplot(refFuncMat,las=2)
hexplot(ct.rv,mincnt=100,color='pAkt')
hexplot(ct.rv,mincnt=2,color='pErk')
hexplot(ct.rv,mincnt=2,color='pAkt')
?invisible
devtools::build_win()
source('~/.active-rstudio-document', echo=TRUE)
load("vignettes/extdata/refPhenoMat.rda")
load("vignettes/extdata/refMat.rda")
load("vignettes/extdata/refFuncMat.rda")
load("vignettes/extdata/refAnnots.rda.rda")
load("vignettes/extdata/refAnnots.rda")
levels(refAnnots$Cells)
load('extdata/refAnnots.rda')
ksink <- lapply(levels(refAnnots$Cells),function(x) cat(' *',x,'\n'))
bubbleRadviz()
?bubbleRadviz
pop.nor
pop.norm
pop.norm <- apply(ref,2,function(x) {
cx <- quantile(x,c(0.025,0.975))
x[x<cx[1]] <- cx[1]
x[x>cx[2]] <- cx[2]
x <- (x-cx[1])/diff(cx)
x <- tapply(x,refAnnots$Cells,median)
return(x)
}
)
pop.rv <- do.radviz(pop.norm,ct.S)
pop.size <- table(refAnnots$Cells)
pop.cols <- setNames(rainbow_hcl(length(levels(refAnnots$Cells))),
levels(refAnnots$Cells))
pop.norm <- apply(ref,2,function(x) {
cx <- quantile(x,c(0.025,0.975))
x[x<cx[1]] <- cx[1]
x[x>cx[2]] <- cx[2]
x <- (x-cx[1])/diff(cx)
x <- tapply(x,refAnnots$Cells,median)
return(x)
}
)
pop.norm <- apply(refMat,2,function(x) {
cx <- quantile(x,c(0.025,0.975))
x[x<cx[1]] <- cx[1]
x[x>cx[2]] <- cx[2]
x <- (x-cx[1])/diff(cx)
x <- tapply(x,refAnnots$Cells,median)
return(x)
}
)
pop.norm
bubbleRadviz(pop.rv,
bubble.color=pop.cols[dimnames(pop.norm)[[1]]],
bubble.size=pop.size[dimnames(pop.norm)[[1]]])
pop.norm <- apply(refMat,2,function(x) {
cx <- quantile(x,c(0.025,0.975))
x[x<cx[1]] <- cx[1]
x[x>cx[2]] <- cx[2]
x <- (x-cx[1])/diff(cx)
x <- tapply(x,refAnnots$Cells,median)
return(x)
}
)
pop.rv <- do.radviz(pop.norm,ct.S)
pop.size <- table(refAnnots$Cells)
pop.cols <- setNames(rainbow_hcl(length(levels(refAnnots$Cells))),
levels(refAnnots$Cells))
# loading the data
load('extdata/refPhenoMat.rda')
load('extdata/refFuncMat.rda')
load('extdata/refMat.rda')
# normalize the data to min and max of each dimension
norm <- apply(refMat,2,function(x) {
cx <- quantile(x,c(0.025,0.975))
x[x<cx[1]] <- cx[1]
x[x>cx[2]] <- cx[2]
x <- (x-cx[1])/diff(cx)
return(x)
}
)
# perform radviz on phenotypic markers
ct.S <- make.S(dimnames(refPhenoMat)[[2]])
ct.sim <- cosine(norm)
# optimize the dimensional anchors
optim.ct <- do.optim(ct.S,ct.sim,iter=100,n=1000)
ct.S <- make.S(tail(optim.ct$best,1)[[1]])
ct.rv <- do.radviz(norm,ct.S)
pop.norm <- apply(refMat,2,function(x) {
cx <- quantile(x,c(0.025,0.975))
x[x<cx[1]] <- cx[1]
x[x>cx[2]] <- cx[2]
x <- (x-cx[1])/diff(cx)
x <- tapply(x,refAnnots$Cells,median)
return(x)
}
)
pop.rv <- do.radviz(pop.norm,ct.S)
pop.size <- table(refAnnots$Cells)
pop.cols <- setNames(rainbow_hcl(length(levels(refAnnots$Cells))),
levels(refAnnots$Cells))
bubbleRadviz(pop.rv,
bubble.color=pop.cols[dimnames(pop.norm)[[1]]],
bubble.size=pop.size[dimnames(pop.norm)[[1]]])
bubbleRadviz(pop.rv,
bubble.color=pop.cols[dimnames(pop.norm)[[1]]],
bubble.size=log10(pop.size[dimnames(pop.norm)[[1]]])
)
bubbleRadviz(pop.rv,
bubble.color=pop.cols[dimnames(pop.norm)[[1]]],
bubble.size=log2(pop.size[dimnames(pop.norm)[[1]]])
)
bubbleRadviz(pop.rv,
bubble.color=pop.cols[dimnames(pop.norm)[[1]]],
bubble.size=log(pop.size[dimnames(pop.norm)[[1]]])
)
bubbleRadviz(pop.rv,
bubble.color=pop.cols[dimnames(pop.norm)[[1]]],
bubble.size=log(pop.size[dimnames(pop.norm)[[1]]])
)
bubbleRadviz(pop.rv,
bubble.color=pop.cols[dimnames(pop.norm)[[1]]],
bubble.size=log(pop.size[dimnames(pop.norm)[[1]]])
)
legend("topleft",
legend=names(pop.cols),
col=pop.cols,
cex=0.8,
bty='n')
bubbleRadviz(pop.rv,
bubble.color=pop.cols[dimnames(pop.norm)[[1]]],
bubble.size=log(pop.size[dimnames(pop.norm)[[1]]])
)
legend("topleft",
legend=names(pop.cols),
col=pop.cols,
cex=0.8,
pch=16,
bty='n')
?rainbow_hcl
pop.norm <- apply(refMat,2,function(x) {
cx <- quantile(x,c(0.025,0.975))
x[x<cx[1]] <- cx[1]
x[x>cx[2]] <- cx[2]
x <- (x-cx[1])/diff(cx)
x <- tapply(x,refAnnots$Cells,median)
return(x)
}
)
pop.rv <- do.radviz(pop.norm,ct.S)
pop.size <- table(refAnnots$Cells)
pop.cols <- setNames(terrain_hcl(length(levels(refAnnots$Cells))),
levels(refAnnots$Cells))
bubbleRadviz(pop.rv,
bubble.color=pop.cols[dimnames(pop.norm)[[1]]],
bubble.size=log(pop.size[dimnames(pop.norm)[[1]]])
)
legend("topleft",
legend=names(pop.cols),
col=pop.cols,
cex=0.8,
pch=16,
bty='n')
pop.norm <- apply(refMat,2,function(x) {
cx <- quantile(x,c(0.025,0.975))
x[x<cx[1]] <- cx[1]
x[x>cx[2]] <- cx[2]
x <- (x-cx[1])/diff(cx)
x <- tapply(x,refAnnots$Cells,median)
return(x)
}
)
pop.rv <- do.radviz(pop.norm,ct.S)
pop.size <- table(refAnnots$Cells)
pop.cols <- setNames(rainbow_hcl(length(levels(refAnnots$Cells))),
levels(refAnnots$Cells))
bubbleRadviz(pop.rv,
bubble.color=pop.cols[dimnames(pop.norm)[[1]]],
bubble.size=log(pop.size[dimnames(pop.norm)[[1]]])
)
legend("topleft",
legend=names(pop.cols),
col=pop.cols,
cex=0.8,
pch=16,
bty='n')
cut(pop.norm[,'pS6'])
cut(pop.norm[,'pS6'],breaks=9)
cut(pop.norm[,'pS6'],breaks=9,labels=F)
cut(pop.norm[,'pS6'],breaks=9,labels=F,include.lowest=TRUE)
cut(pop.norm[,'pS6'],breaks=8,labels=F,include.lowest=TRUE)
S6.cols <- setNames(heat_hcl(8)[cut(pop.norm[,'pS6'],breaks=8,labels=F,include.lowest=TRUE)],
dimnames(pop.norm)[[1]])
bubbleRadviz(pop.rv,
bubble.color=S6.cols[dimnames(pop.norm)[[1]]],
bubble.size=log(pop.size[dimnames(pop.norm)[[1]]])
)
do.hex
S6.cols <- setNames(colramp(8)[cut(pop.norm[,'pS6'],breaks=8,labels=F,include.lowest=TRUE)],
dimnames(pop.norm)[[1]])
bubbleRadviz(pop.rv,
bubble.color=S6.cols[dimnames(pop.norm)[[1]]],
bubble.size=log(pop.size[dimnames(pop.norm)[[1]]])
)
?colramp
?"colorRamp"
S6.cols <- setNames(colRampPalette(8)[cut(pop.norm[,'pS6'],breaks=8,labels=F,include.lowest=TRUE)],
dimnames(pop.norm)[[1]])
bubbleRadviz(pop.rv,
bubble.color=S6.cols[dimnames(pop.norm)[[1]]],
bubble.size=log(pop.size[dimnames(pop.norm)[[1]]])
)
colRampPalette
S6.cols <- setNames(colorRampPalette(8)[cut(pop.norm[,'pS6'],breaks=8,labels=F,include.lowest=TRUE)],
dimnames(pop.norm)[[1]])
bubbleRadviz(pop.rv,
bubble.color=S6.cols[dimnames(pop.norm)[[1]]],
bubble.size=log(pop.size[dimnames(pop.norm)[[1]]])
)
S6.cols <- setNames(colorRampPalette(blues9)(8)[cut(pop.norm[,'pS6'],breaks=8,labels=F,include.lowest=TRUE)],
S6.cols <- setNames(colorRampPalette(blues9)(8)[cut(pop.norm[,'pS6'],
breaks=8,
labels=F,
include.lowest=TRUE)],
dimnames(pop.norm)[[1]])
bubbleRadviz(pop.rv,
bubble.color=S6.cols[dimnames(pop.norm)[[1]]],
bubble.size=log(pop.size[dimnames(pop.norm)[[1]]])
)
colorRampPalette(blues9)
colorRampPalette(blues9)(8)
colorRampPalette(blues9)(8)[cut(pop.norm[,'pS6'],
breaks=8,
labels=F,
include.lowest=TRUE)]
S6.cols <- setNames(colorRampPalette(blues9)(8)[cut(pop.norm[,'pS6'],
breaks=8,
labels=F,
include.lowest=TRUE)],
dimnames(pop.norm)[[1]])
S6.cols
S6.cols <- setNames(colorRampPalette(blues9)(8)[cut(pop.norm[,'pS6'],
breaks=8,
labels=F,
include.lowest=TRUE)],
dimnames(pop.norm)[[1]])
bubbleRadviz(pop.rv,
bubble.color=S6.cols[dimnames(pop.norm)[[1]]],
bubble.size=log(pop.size[dimnames(pop.norm)[[1]]])
)
S6.cols <- setNames(colorRampPalette(blues9)(8)[cut(pop.norm[,'pS6'],
breaks=8,
labels=F,
include.lowest=TRUE)],
dimnames(pop.norm)[[1]])
bubbleRadviz(pop.rv,
bubble.color=S6.cols[dimnames(pop.norm)[[1]]],
bubble.fg='grey',
bubble.size=log(pop.size[dimnames(pop.norm)[[1]]])
)
S6.cols <- setNames(colorRampPalette(blues9)(8)[cut(pop.norm[,'pS6'],
breaks=8,
labels=F,
include.lowest=TRUE)],
dimnames(pop.norm)[[1]])
bubbleRadviz(pop.rv,
bubble.color=S6.cols[dimnames(pop.norm)[[1]]],
bubble.fg=pop.cols[dimnames(pop.norm)[[1]]],
bubble.size=log(pop.size[dimnames(pop.norm)[[1]]])
)
?"text.radviz"
S6.cols <- setNames(colorRampPalette(blues9)(8)[cut(pop.norm[,'pS6'],
breaks=8,
labels=F,
include.lowest=TRUE)],
dimnames(pop.norm)[[1]])
bubbleRadviz(pop.rv,
bubble.color=S6.cols[dimnames(pop.norm)[[1]]],
bubble.fg='grey',
bubble.size=log(pop.size[dimnames(pop.norm)[[1]]])
)
text(pop.rv,labels=dimnames(pop.norm)[[1]],add=T)
?knitr
par(mfrow=c(1,2))
bubbleRadviz(pop.rv,
bubble.color=pop.cols[dimnames(pop.norm)[[1]]],
bubble.size=log(pop.size[dimnames(pop.norm)[[1]]])
)
pop.new()
legend("center",
legend=names(pop.cols),
col=pop.cols,
cex=0.8,
pch=16,
bty='n')
par(mfrow=c(1,2))
bubbleRadviz(pop.rv,
bubble.color=pop.cols[dimnames(pop.norm)[[1]]],
bubble.size=log(pop.size[dimnames(pop.norm)[[1]]])
)
plot.new()
legend("center",
legend=names(pop.cols),
col=pop.cols,
cex=0.8,
pch=16,
bty='n')
?bubbleRadviz
library(Radviz)
cosine
??cosine
?examples(cosine)
?examples('cosine')
?cosine
examples('cosine')
example('cosine')
sim.mat
?cosine
cosine
dist(scaled)
dist(t(scaled))
as.matrix(dist(t(scaled)))
sim.mat
A <- scaled[1,]
A
A <- scaled[,1]
A
B <- scaled[,2]
plot(A,B)
crossprod(A,B)
A%*%B
system.time(A%*%B)
system.time(crossprod(A,B))
cosine
sum(A^2)
crossprod(A)
cor(A,B)
crossprod(A,B)/sqrt(crossprod(A)*crossprod(B))
cor(A,B)
X <- A-mean(A)
y <- B-mean(B)
crossprod(X,y)/sqrt(crossprod(X)*crossprod(Y))
Y <- B-mean(B)
crossprod(X,y)/sqrt(crossprod(X)*crossprod(Y))
X <- rnorm(length(A))
Y <- rnorm(length(B))
X <- (rnorm(length(A)))
X <- abs(rnorm(length(A)))
X <- rnorm(length(A))
cosn <- function(A,B) crossprod(A,B)/sqrt(crossprod(A)*crossprod(B))
cosn(A,B)
cosn(X,Y)
sapply(1:1000,function(x) {})
sapply(1:1000,function(x) {})
sapply(1:1000,function(x) {
X <- rnorm(length(A))
Y <- rnorm(length(B))
cosn(X,Y)
})
tmp <- sapply(1:1000,function(x) {
X <- rnorm(length(A))
Y <- rnorm(length(B))
cosn(X,Y)
})
plot(density(tmp))
devtools::use_package('bodenmiller','Suggests')
list('a'=3,'b'=4)
tmp <- list('a'=3,'b'=4)
tmp
tmp[-'a']
return(y)W
}

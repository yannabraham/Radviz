// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// optimizeAnchors
arma::mat optimizeAnchors(arma::mat scaledData, NumericVector Rclasses, arma::mat anchors, double attractG, double repelG, int law, int steps, bool normalizeExamples);
RcppExport SEXP _Radviz_optimizeAnchors(SEXP scaledDataSEXP, SEXP RclassesSEXP, SEXP anchorsSEXP, SEXP attractGSEXP, SEXP repelGSEXP, SEXP lawSEXP, SEXP stepsSEXP, SEXP normalizeExamplesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type scaledData(scaledDataSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Rclasses(RclassesSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type anchors(anchorsSEXP);
    Rcpp::traits::input_parameter< double >::type attractG(attractGSEXP);
    Rcpp::traits::input_parameter< double >::type repelG(repelGSEXP);
    Rcpp::traits::input_parameter< int >::type law(lawSEXP);
    Rcpp::traits::input_parameter< int >::type steps(stepsSEXP);
    Rcpp::traits::input_parameter< bool >::type normalizeExamples(normalizeExamplesSEXP);
    rcpp_result_gen = Rcpp::wrap(optimizeAnchors(scaledData, Rclasses, anchors, attractG, repelG, law, steps, normalizeExamples));
    return rcpp_result_gen;
END_RCPP
}
// optimizeAnchors2
arma::mat optimizeAnchors2(arma::mat scaledData, NumericVector Rclasses, arma::mat anchors, NumericVector RclustWeights, double attractG, double repelG, int law, int steps, bool normalizeExamples);
RcppExport SEXP _Radviz_optimizeAnchors2(SEXP scaledDataSEXP, SEXP RclassesSEXP, SEXP anchorsSEXP, SEXP RclustWeightsSEXP, SEXP attractGSEXP, SEXP repelGSEXP, SEXP lawSEXP, SEXP stepsSEXP, SEXP normalizeExamplesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type scaledData(scaledDataSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Rclasses(RclassesSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type anchors(anchorsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type RclustWeights(RclustWeightsSEXP);
    Rcpp::traits::input_parameter< double >::type attractG(attractGSEXP);
    Rcpp::traits::input_parameter< double >::type repelG(repelGSEXP);
    Rcpp::traits::input_parameter< int >::type law(lawSEXP);
    Rcpp::traits::input_parameter< int >::type steps(stepsSEXP);
    Rcpp::traits::input_parameter< bool >::type normalizeExamples(normalizeExamplesSEXP);
    rcpp_result_gen = Rcpp::wrap(optimizeAnchors2(scaledData, Rclasses, anchors, RclustWeights, attractG, repelG, law, steps, normalizeExamples));
    return rcpp_result_gen;
END_RCPP
}
// optimizeAnchorsGraph
arma::mat optimizeAnchorsGraph(arma::mat scaledData, NumericVector RedgesInds, NumericVector RedgeWeights, NumericVector RdegreeVect, arma::mat anchors, double attractG, double repelG, int law, int steps, bool normalizeExamples);
RcppExport SEXP _Radviz_optimizeAnchorsGraph(SEXP scaledDataSEXP, SEXP RedgesIndsSEXP, SEXP RedgeWeightsSEXP, SEXP RdegreeVectSEXP, SEXP anchorsSEXP, SEXP attractGSEXP, SEXP repelGSEXP, SEXP lawSEXP, SEXP stepsSEXP, SEXP normalizeExamplesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type scaledData(scaledDataSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type RedgesInds(RedgesIndsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type RedgeWeights(RedgeWeightsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type RdegreeVect(RdegreeVectSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type anchors(anchorsSEXP);
    Rcpp::traits::input_parameter< double >::type attractG(attractGSEXP);
    Rcpp::traits::input_parameter< double >::type repelG(repelGSEXP);
    Rcpp::traits::input_parameter< int >::type law(lawSEXP);
    Rcpp::traits::input_parameter< int >::type steps(stepsSEXP);
    Rcpp::traits::input_parameter< bool >::type normalizeExamples(normalizeExamplesSEXP);
    rcpp_result_gen = Rcpp::wrap(optimizeAnchorsGraph(scaledData, RedgesInds, RedgeWeights, RdegreeVect, anchors, attractG, repelG, law, steps, normalizeExamples));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_Radviz_optimizeAnchors", (DL_FUNC) &_Radviz_optimizeAnchors, 8},
    {"_Radviz_optimizeAnchors2", (DL_FUNC) &_Radviz_optimizeAnchors2, 9},
    {"_Radviz_optimizeAnchorsGraph", (DL_FUNC) &_Radviz_optimizeAnchorsGraph, 10},
    {NULL, NULL, 0}
};

RcppExport void R_init_Radviz(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
